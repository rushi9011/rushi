 [HttpPut]
    [ProducesResponseType(200)]
    [ProducesResponseType(404)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [MustHavePermission(FSHAction.Update, FSHResource.Papers)]
    [OpenApiOperation("Update Sequence Number.", "")]
    public async Task<ActionResult<StandardApiResponse>> UpdateSequenceNumber(UpdateSequenceNumberRequest request, string paperId)
    {
        return paperId.ToString().ToLower() != request.PaperId.ToString().ToLower()
            ? BadRequest()
            : Ok(await Mediator.Send(request));
    }

    using CQ.ExamManagement.Application.Entities.PaperItemEntity.Interfaces;

namespace CQ.ExamManagement.Application.Entities.PaperItemEntity.Command;
public class UpdateSequenceNumberRequest : IRequest<StandardApiResponse>
{
    public DefaultIdType PaperId { get; set; }
    public DefaultIdType SetId { get; set; }
    public DefaultIdType SectionId { get; set; }
    public int SequenceNumber { get; set; }
}

public class UpdateSequenceNumberRequestHandler : IRequestHandler<UpdateSequenceNumberRequest, StandardApiResponse>
{
    private readonly IPaperItemService _paperItemService;

    public UpdateSequenceNumberRequestHandler(IPaperItemService paperItemService)
    {
        _paperItemService = paperItemService;
    }

    public async Task<StandardApiResponse> Handle(UpdateSequenceNumberRequest request, CancellationToken cancellationToken)
    {
        var result = await _paperItemService.UpdateSequenceNumber(request.PaperId, request.SetId, request.SectionId, request.SequenceNumber, cancellationToken);

        if (result)
        {
            return new StandardApiResponse("SequenceNumber updated successfully.", true);
        }
        else
        {
 
            return new StandardApiResponse("Failed to update SequenceNumber.", false);
        }
    }
}

 public Task<bool> UpdateSequenceNumber(DefaultIdType paperId, DefaultIdType setId, DefaultIdType sectionId, int sequenceNumber, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }




public interface IPaperItemService
{
    // ... other methods

    Task<bool> UpdateSequenceNumber(DefaultIdType paperId, DefaultIdType setId, DefaultIdType sectionId, int sequenceNumber, CancellationToken cancellationToken);
}

public class PaperItemService : IPaperItemService
{
    private readonly IPaperItemRepository _paperItemRepository; // Assuming you have a repository for PaperItems

    public PaperItemService(IPaperItemRepository paperItemRepository)
    {
        _paperItemRepository = paperItemRepository;
    }

    // ... other methods

    public async Task<bool> UpdateSequenceNumber(DefaultIdType paperId, DefaultIdType setId, DefaultIdType sectionId, int sequenceNumber, CancellationToken cancellationToken)
    {
        try
        {
            // Retrieve the paper item based on PaperId, SetId, and SectionId
            var existingPaperItem = await _paperItemRepository.GetByPaperSetAndSectionAsync(paperId, setId, sectionId);

            if (existingPaperItem == null)
            {
                // Paper item not found, return false or throw an exception based on your design
                return false;
            }

            // Update the sequence number
            existingPaperItem.SequenceNumber = sequenceNumber;

            // Save the changes to the repository
            await _paperItemRepository.UpdateAsync(existingPaperItem);

            return true;
        }
        catch (Exception)
        {
            // Handle exceptions, log errors, and return false or throw an exception based on your design
            return false;
        }
    }
}

