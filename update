  [HttpPut]
    [ProducesResponseType(200)]
    [ProducesResponseType(404)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [MustHavePermission(FSHAction.Update, FSHResource.Papers)]
    [OpenApiOperation("Update a Paper.", "")]
    public async Task<ActionResult<StandardApiResponse>> UpdateAsync(UpdatePaperRequest request, DefaultIdType id)
    {
        return id != request.PaperID
            ? BadRequest()
            : Ok(await Mediator.Send(request));
    }



using CQ.ExamManagement.Application.Entities.Groups.Command;
using CQ.ExamManagement.Application.Entities.Groups;
using CQ.ExamManagement.Application.Entities.PaperItemEntity.Specification;

namespace CQ.ExamManagement.Application.Entities.Papers.Command;
public class UpdatePaperRequest : IRequest<StandardApiResponse>
{
    public DefaultIdType PaperID { get; set; }
    public string PaperTitle { get; set; } = default!;
    public string PaperCode { get; set; } = default!;
    public DefaultIdType ExamId { get; set; }
    public int? TotalSection { get; set; }
    public int? TotalQuesion { get; set; }
    public decimal? TotalMarks { get; set; } = default!;
    public int? Duration { get; set; } = default!;
    public int? LoginTime { get; set; } = default!;
    public int? ReportingTime { get; set; } = default!;
    public bool? IsOnSpotResult { get; set; } = false;
    public int? SubmtExamDuration { get; set; } = 0;
}
namespace CQ.ExamManagement.Application.Common.ApiResponses;
public class StandardApiResponse
{
    public string Message { get; }
    public bool IsSuccess { get; }

    public StandardApiResponse(string message, bool isSuccess = false)
    {
        Message = message;
        IsSuccess = isSuccess;
    }
}


public class UpdatePaperRequestHandler : IRequestHandler<UpdatePaperRequest, StandardApiResponse>
{
    private readonly IStringLocalizer<UpdatePaperRequestHandler> _localizer;
    private readonly IPapermanagementService _papermanagementService;
    private readonly IPaperService _paperService;

    public UpdatePaperRequestHandler(
        IPapermanagementService papermanagementService,
        IPaperService paperService,
        IStringLocalizer<UpdatePaperRequestHandler> localizer)
    {
        _papermanagementService = papermanagementService;
        _paperService = paperService;
        _localizer = localizer;
    }

    public async Task<StandardApiResponse> Handle(UpdatePaperRequest updatepaperrequest, CancellationToken cancellationToken)
    {
        var paperToCheck = await _paperService.GetPaperByPaperTitleandPaperCode(
            papertitle: updatepaperrequest.PaperTitle,
            /*papercode: updatepaperrequest.PaperCode,*/
            papercode: string.IsNullOrEmpty(updatepaperrequest.PaperCode) ? updatepaperrequest.PaperTitle : updatepaperrequest.PaperCode,
            paperid: updatepaperrequest.PaperID,
            cancellationToken: cancellationToken);

        if (paperToCheck != null)
        {
            throw new ConflictException(string.Format(_localizer["Paper.PaperTitleAndCodeAlreadyExists"]));
        }

        if (updatepaperrequest.TotalSection <= 0)
        {
            throw new ConflictException(string.Format(_localizer["Paper.TotalSectionCannotbelessthanzero"]));
        }

        if (updatepaperrequest.TotalQuesion < 0)
        {
            throw new ConflictException(string.Format(_localizer["Paper.TotalQuestionCannotbelessthanzero"]));
        }

        if (updatepaperrequest.TotalMarks < 0)
        {
            throw new ConflictException(string.Format(_localizer["Paper.TotalMarksCannotbelessthanzero"]));
        }

        var paperid = await _paperService.UpdatePaper(updatepaperrequest, cancellationToken);

        return new StandardApiResponse(message: _localizer["Paper.UpdateSuccess", paperid], true);
    }
}
public interface IPaperItemManagementService : ITransientService
{
    Task<StandardApiResponse> AssignItemsToPaper(AssginItemsToPaperRequest request, CancellationToken cancellationToken);
    Task<PaperItemDto> AddItemsToPaper(AddItemToPaperRequest request, CancellationToken cancellationToken);
    Task<List<PaperItemCountDto>>GetPaperItemCount(ItemCountByPaperIdRequest request, CancellationToken cancellationToken);
    Task<StandardApiResponse> AddComprehentionToPaper(AddComprehentionToPaperRequest request, CancellationToken cancellationToken);
    Task<Paper> IsValidPaper(DefaultIdType PaperId, DefaultIdType SectionId, DefaultIdType SetId, DefaultIdType PaperLanguageId, CancellationToken cancellationToken);
    Task<List<ItemsDetailsDto>> GetPaperItems(List<DefaultIdType> itemDetailIds, CancellationToken cancellationToken);
    Task CreatePaperItemWithProject(List<LanguageDto> languageDto, List<SectionDto> sectionDto, List<SetDto> setDto, List<GetItemDetailsDto> itemDto);
    Task<List<GetItemDetailsDto>> GetItemDetails(List<DefaultIdType> itemDetailIds, CancellationToken cancellationToken);
}








using CQ.ExamManagement.Application.Entities.PaperItemEntity.Command;
using CQ.ExamManagement.Application.Entities.PaperItemEntity.DTO;
using CQ.ExamManagement.Application.Entities.PaperItemEntity.Query;

namespace CQ.ExamManagement.Host.Controllers.PaperItem;

public class PaperItemController : VersionedApiController
{
    /// <summary>
    /// Assigned items to Paper.
    /// </summary>
    /// <response code="200">Success! New PaperDetails Created.</response>
    /// <response code="400">Bad Request! PaperDetails has missing or invalid values.</response>
    /// <response code="401">UnAuthoriszed! You are not authorized to perform this operation.</response>
    /// <response code="500">Internal Error! Can't Create PaperDetails right now.</response>
    [HttpPost]
    [MustHavePermission(FSHAction.Create, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("Assigned Items to Paper.", "")]
    public Task<StandardApiResponse> CreateAsync(AssginItemsToPaperRequest request)
    {
        return Mediator.Send(request);
    }

    /// <summary>
    /// Add item to Paper.
    /// </summary>
    /// <response code="200">Success! New PaperDetails Created.</response>
    /// <response code="400">Bad Request! PaperDetails has missing or invalid values.</response>
    /// <response code="401">UnAuthoriszed! You are not authorized to perform this operation.</response>
    /// <response code="500">Internal Error! Can't Create PaperDetails right now.</response>
    [HttpPost("AddItemToPaper")]
    [MustHavePermission(FSHAction.Create, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("Add Item to Paper.", "")]
    public Task<PaperItemDto> AddItemToPaper(AddItemToPaperRequest request)
    {
        return Mediator.Send(request);
    }

    /// <summary>
    /// Retrive ItemCount by Set and Language.
    /// </summary>
    /// <response code="200">Success! Retrieved Paper.</response>
    /// <response code="400">Bad Request! Paper has missing or invalid values.</response>
    /// <response code="401">UnAuthoriszed! You are not authorized to perform this operation.</response>
    /// <response code="404">Not Found! Paper details not found.</response>
    /// <response code="500">Internal Error! Can't Find Paper Details right now.</response>
    [HttpGet]
    [MustHavePermission(FSHAction.View, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(404)]
    [ProducesResponseType(500)]
    [OpenApiOperation("Get a ItemCount by PaperId.", "")]
    public Task<List<PaperItemCountDto>> GetAsync(DefaultIdType paperId)
    {
        return Mediator.Send(new ItemCountByPaperIdRequest(paperId));
    }

    /// <summary>
    /// Add Comprehention to Paper.
    /// </summary>
    /// <response code="200">Success! New Comprehention Created.</response>
    /// <response code="400">Bad Request! Comprehention has missing or invalid values.</response>
    /// <response code="401">UnAuthoriszed! You are not authorized to perform this operation.</response>
    /// <response code="500">Internal Error! Can't Create Comprehention right now.</response>
    [HttpPost("CreateOrUpdateComprehention")]
    [MustHavePermission(FSHAction.Create, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("CreateOrUpdate Comprehention to Paper.", "")]
    public Task<StandardApiResponse> AddComprehentionToPaper(AddComprehentionToPaperRequest request)
    {
        return Mediator.Send(request);
    }

    /// <summary>
    /// ItemCount By PaperId.
    /// </summary>
    /// <response code="200">Success! New Comprehention Created.</response>
    /// <response code="400">Bad Request! Comprehention has missing or invalid values.</response>
    /// <response code="401">UnAuthoriszed! You are not authorized to perform this operation.</response>
    /// <response code="500">Internal Error! Can't Create Comprehention right now.</response>
    [HttpPost("ItemCount")]
    [MustHavePermission(FSHAction.Create, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("ItemCount by PaperId.", "")]
    public Task<PaginationResponse<PaperItemCountDto>> SearchItemCount(ItemCountByPaperIdSearchRequest request)
    {
        return Mediator.Send(request);
    }

    [HttpPost("GetPaperItems")]
    [MustHavePermission(FSHAction.View, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("Get PaperItems by ItemDetailIds.", "")]
    public Task<List<ItemsDetailsDto>> GetPaperItems(GetPaperItemsRequest request)
    {
        return Mediator.Send(request);
    }

    [HttpPost("GetItemDetails")]
    [MustHavePermission(FSHAction.View, FSHResource.Papers)]
    [ProducesResponseType(200)]
    [ProducesResponseType(400)]
    [ProducesResponseType(401)]
    [ProducesResponseType(500)]
    [OpenApiOperation("Get ItemDetails by ItemDetailIds.", "")]
    public Task<List<GetItemDetailsDto>> GetItemDetails(GetItemDetailsRequest request)
    {
        return Mediator.Send(request);
    }
}


--------------------------------------------

 /// <summary>
        /// Update SequenceNumber for an Item in a Paper.
        /// </summary>
        /// <response code="200">Success! SequenceNumber Updated.</response>
        /// <response code="400">Bad Request! Invalid values or missing parameters.</response>
        /// <response code="401">Unauthorized! You are not authorized to perform this operation.</response>
        /// <response code="404">Not Found! Paper or Item not found.</response>
        /// <response code="500">Internal Error! Can't update SequenceNumber right now.</response>
        [HttpPut("UpdateSequenceNumber")]
        [MustHavePermission(FSHAction.Update, FSHResource.Papers)]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(401)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        [OpenApiOperation("Update SequenceNumber for an Item in a Paper.", "")]
        public Task<StandardApiResponse> UpdateSequenceNumber(UpdateSequenceNumberRequest request)
        {
            return Mediator.Send(request);
        }
my code

// UpdateSequenceNumberRequest
public class UpdateSequenceNumberRequest : IRequest<StandardApiResponse>
{
    public DefaultIdType PaperId { get; set; }
    public DefaultIdType SetId { get; set; }
    public DefaultIdType SectionId { get; set; }
    public int SequenceNumber { get; set; }
}

// UpdateSequenceNumberRequestHandler
public class UpdateSequenceNumberRequestHandler : IRequestHandler<UpdateSequenceNumberRequest, StandardApiResponse>
{
    private readonly IPaperItemService _paperItemService;

    public UpdateSequenceNumberRequestHandler(IPaperItemService paperItemService)
    {
        _paperItemService = paperItemService;
    }

    public async Task<StandardApiResponse> Handle(UpdateSequenceNumberRequest request, CancellationToken cancellationToken)
    {
        // Implement your logic to update the sequence number using _paperItemService.

        // Example:
        var result = await _paperItemService.UpdateSequenceNumber(request.PaperId, request.SetId, request.SectionId, request.SequenceNumber, cancellationToken);

        if (result)
        {
            return new StandardApiResponse("SequenceNumber updated successfully.", true);
        }
        else
        {
            // Handle the case where the update fails.
            return new StandardApiResponse("Failed to update SequenceNumber.", false);
        }
    }
}


public interface IPaperItemManagementService : ITransientService
{
    // Existing methods...

    Task UpdateSequenceNumber(DefaultIdType paperId, DefaultIdType setId, DefaultIdType sectionId, int sequenceNumber);
}





